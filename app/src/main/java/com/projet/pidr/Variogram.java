package com.projet.pidr;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import static android.R.attr.colorBackgroundFloating;
import static android.R.attr.port;
import static android.media.CamcorderProfile.get;


import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;



import com.github.mikephil.charting.charts.Chart;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.data.Entry;
import com.github.mikephil.charting.data.LineData;
import com.github.mikephil.charting.data.LineDataSet;

import Jama.Matrix;

/**
 * Created by Paul on 15/05/2017.
 */

public class Variogram extends Activity{

    ArrayList<Float> V = new ArrayList<Float>();
    float[] Gtest = new float[463];
    int dist = 0;

    public float mean(ArrayList<Float> L) {
        float moy = 0;
        for (int i = 0; i < L.size(); i++) {
            moy += L.get(i);
        }
        return moy;
    }

    public float variance(ArrayList<Float> L) {
        float var = 0;
        float moy = mean(L);
        for (int i = 0; i < L.size(); i++) {
            var += Math.pow(L.get(i) - moy, 2);
        }
        var /= L.size();
        return var;
    }

    public float variogram_one_calcul(ArrayList<Float> V, int h, int dist) {
        int N = V.size() - (h / dist - 1);
        int step = h / dist;
        float gamma = 0;
        for (int i = 0; i < N - 1; i++) {
            gamma += 1. / (2. * N) * Math.pow(V.get(i+step) - V.get(i), 2);
        }
        return gamma;
    }

    public ArrayList<Float> variogram_total_calcul(ArrayList<Float> V, int dist) {
        ArrayList<Float> L = new ArrayList<Float>();
        int length = V.size() * dist;
        for (int h = 1; h < length; h++) {
            L.add(variogram_one_calcul(V, h, dist));
        }
        return L;
    }

    public int portee(ArrayList<Integer> L, float var){
        for (int h = 1; h<=L.size(); h++){
            if (L.get(h)<var){
                int port = h-1;
            }
        }
        return port;
    }
    float[] T= new float[2];
    public void onCreate(Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        float Gtest[] = {76.340000000000003f, 83.739999999999995f, 83.189999999999998f, 80.439999999999998f, 75.420000000000002f, 71.5f, 69.629999999999995f, 70.010000000000005f, 67.560000000000002f, 67.329999999999998f, 64.769999999999996f, 64.799999999999997f, 66.25f, 66.549999999999997f, 66.129999999999995f, 65.540000000000006f, 63.07f, 59.710000000000001f, 57.859999999999999f, 54.799999999999997f, 51.799999999999997f, 52.619999999999997f, 53.659999999999997f, 55.789999999999999f, 58.539999999999999f, 60.950000000000003f, 66.560000000000002f, 70.879999999999995f, 71.569999999999993f, 72.530000000000001f, 67.989999999999995f, 60.310000000000002f, 55.520000000000003f, 56.07f, 62.670000000000002f, 66.900000000000006f, 68.540000000000006f, 68.700000000000003f, 63.200000000000003f, 60.329999999999998f, 58.159999999999997f, 52.609999999999999f, 45.719999999999999f, 35.920000000000002f, 26.620000000000001f, 24.140000000000001f, 24.359999999999999f, 23.280000000000001f, 25.699999999999999f, 28.199999999999999f, 28.350000000000001f, 31.710000000000001f, 35.520000000000003f, 39.109999999999999f, 44.57f, 54.420000000000002f, 61.719999999999999f, 66.810000000000002f, 74.170000000000002f, 82.180000000000007f, 85.670000000000002f, 87.060000000000002f, 84.200000000000003f, 83.450000000000003f, 90.420000000000002f, 100.83f, 108.34f, 107.75f, 92.629999999999995f, 70.459999999999994f, 55.670000000000002f, 49.350000000000001f, 46.82f, 48.109999999999999f, 51.659999999999997f, 49.729999999999997f, 51.460000000000001f, 54.670000000000002f, 56.960000000000001f, 58.670000000000002f, 61.189999999999998f, 60.770000000000003f, 60.990000000000002f, 63.649999999999999f, 66.980000000000004f, 68.439999999999998f, 71.390000000000001f, 73.079999999999998f, 71.859999999999999f, 71.829999999999998f, 70.269999999999996f, 69.650000000000006f, 66.780000000000001f, 64.060000000000002f, 60.240000000000002f, 58.25f, 56.789999999999999f, 58.0f, 60.75f, 64.480000000000004f, 65.370000000000005f, 65.840000000000003f, 67.379999999999995f, 67.069999999999993f, 65.280000000000001f, 65.260000000000005f, 63.399999999999999f, 64.099999999999994f, 66.769999999999996f, 69.719999999999999f, 71.0f, 69.769999999999996f, 64.390000000000001f, 60.939999999999998f, 56.890000000000001f, 54.200000000000003f, 53.140000000000001f, 52.700000000000003f, 51.93f, 56.100000000000001f, 61.490000000000002f, 68.769999999999996f, 78.569999999999993f, 85.469999999999999f, 88.629999999999995f, 88.969999999999999f, 84.659999999999997f, 76.480000000000004f, 69.349999999999994f, 63.07f, 59.009999999999998f, 59.939999999999998f, 61.890000000000001f, 63.840000000000003f, 65.129999999999995f, 65.859999999999999f, 64.980000000000004f, 63.130000000000003f, 61.299999999999997f, 59.07f, 54.859999999999999f, 52.060000000000002f, 50.25f, 49.939999999999998f, 49.520000000000003f, 50.380000000000003f, 51.740000000000002f, 54.380000000000003f, 57.350000000000001f, 60.109999999999999f, 60.579999999999998f, 62.390000000000001f, 64.390000000000001f, 63.969999999999999f, 58.899999999999999f, 49.149999999999999f, 37.280000000000001f, 37.280000000000001f, 24.559999999999999f, 18.18f, 15.890000000000001f, 15.67f, 15.77f, 14.619999999999999f, 13.92f, 14.0f, 15.630000000000001f, 18.489999999999998f, 23.27f, 29.039999999999999f, 33.5f, 35.920000000000002f, 37.299999999999997f, 37.93f, 37.009999999999998f, 34.719999999999999f, 33.390000000000001f, 32.479999999999997f, 30.690000000000001f, 30.510000000000002f, 29.420000000000002f, 30.469999999999999f, 32.090000000000003f, 32.140000000000001f, 32.990000000000002f, 31.579999999999998f, 29.07f, 29.969999999999999f, 37.439999999999998f, 52.590000000000003f, 68.180000000000007f, 80.25f, 86.510000000000005f, 86.090000000000003f, 86.090000000000003f, 83.409999999999997f, 84.510000000000005f, 85.030000000000001f, 87.359999999999999f, 85.730000000000004f, 80.200000000000003f, 76.120000000000005f, 74.5f, 73.969999999999999f, 71.239999999999995f, 66.700000000000003f, 66.700000000000003f, 59.420000000000002f, 49.0f, 39.460000000000001f, 32.310000000000002f, 26.09f, 22.370000000000001f, 19.969999999999999f, 18.359999999999999f, 16.5f, 14.84f, 15.720000000000001f, 17.859999999999999f, 19.899999999999999f, 22.420000000000002f, 22.620000000000001f, 20.93f, 19.850000000000001f, 18.300000000000001f, 19.390000000000001f, 24.34f, 29.670000000000002f, 33.899999999999999f, 39.829999999999998f, 44.939999999999998f, 48.549999999999997f, 57.210000000000001f, 60.189999999999998f, 60.630000000000003f, 64.739999999999995f, 72.790000000000006f, 78.409999999999997f, 83.390000000000001f, 82.25f, 75.879999999999995f, 72.239999999999995f, 67.989999999999995f, 65.409999999999997f, 64.930000000000007f, 61.869999999999997f, 59.810000000000002f, 60.590000000000003f, 65.680000000000007f, 73.120000000000005f, 77.689999999999998f, 77.230000000000004f, 72.510000000000005f, 59.530000000000001f, 59.530000000000001f, 46.100000000000001f, 34.899999999999999f, 27.059999999999999f, 23.800000000000001f, 23.73f, 25.300000000000001f, 30.73f, 40.109999999999999f, 51.020000000000003f, 59.939999999999998f, 66.640000000000001f, 67.560000000000002f, 64.700000000000003f, 62.960000000000001f, 63.920000000000002f, 66.189999999999998f, 67.730000000000004f, 69.530000000000001f, 69.569999999999993f, 66.400000000000006f, 63.729999999999997f, 61.189999999999998f, 61.340000000000003f, 63.159999999999997f, 67.599999999999994f, 72.680000000000007f, 76.579999999999998f, 76.670000000000002f, 72.120000000000005f, 60.07f, 48.909999999999997f, 39.399999999999999f, 33.799999999999997f, 34.659999999999997f, 36.280000000000001f, 34.450000000000003f, 30.670000000000002f, 26.59f, 23.77f, 25.199999999999999f, 29.989999999999998f, 37.460000000000001f, 47.600000000000001f, 57.5f, 68.769999999999996f, 80.030000000000001f, 84.280000000000001f, 85.400000000000006f, 88.920000000000002f, 89.450000000000003f, 90.909999999999997f, 97.239999999999995f, 100.16f, 100.42f, 94.180000000000007f, 94.180000000000007f, 81.299999999999997f, 64.209999999999994f, 48.350000000000001f, 36.530000000000001f, 33.579999999999998f, 34.969999999999999f, 37.310000000000002f, 38.170000000000002f, 38.049999999999997f, 35.149999999999999f, 32.920000000000002f, 30.870000000000001f, 30.25f, 31.219999999999999f, 34.060000000000002f, 35.490000000000002f, 36.729999999999997f, 37.539999999999999f, 35.969999999999999f, 35.909999999999997f, 36.210000000000001f, 34.789999999999999f, 34.920000000000002f, 35.829999999999998f, 35.649999999999999f, 37.740000000000002f, 41.789999999999999f, 46.409999999999997f, 51.439999999999998f, 54.210000000000001f, 52.960000000000001f, 50.390000000000001f, 50.0f, 60.82f, 99.310000000000002f, 166.94f, 235.25f, 285.47000000000003f, 305.87f, 291.37f, 252.41f, 208.53f, 169.06999999999999f, 136.52000000000001f, 108.53f, 89.159999999999997f, 80.390000000000001f, 78.069999999999993f, 76.310000000000002f, 72.349999999999994f, 74.769999999999996f, 75.049999999999997f, 71.980000000000004f, 71.049999999999997f, 68.959999999999994f, 64.840000000000003f, 65.219999999999999f, 66.599999999999994f, 68.590000000000003f, 73.439999999999998f, 76.760000000000005f, 78.760000000000005f, 80.329999999999998f, 77.140000000000001f, 71.909999999999997f, 68.439999999999998f, 64.989999999999995f, 64.469999999999999f, 64.959999999999994f, 66.290000000000006f, 67.599999999999994f, 67.430000000000007f, 68.870000000000005f, 73.879999999999995f, 77.890000000000001f, 83.489999999999995f, 87.980000000000004f, 86.450000000000003f, 86.290000000000006f, 82.180000000000007f, 77.069999999999993f, 72.450000000000003f, 63.100000000000001f, 49.229999999999997f, 37.700000000000003f, 26.370000000000001f, 19.57f, 17.32f, 17.09f, 19.530000000000001f, 25.620000000000001f, 33.049999999999997f, 42.689999999999998f, 47.369999999999997f, 47.899999999999999f, 45.189999999999998f, 40.539999999999999f, 38.909999999999997f, 39.619999999999997f, 38.840000000000003f, 37.799999999999997f, 35.030000000000001f, 33.439999999999998f, 36.210000000000001f, 40.890000000000001f, 43.299999999999997f, 43.270000000000003f, 38.840000000000003f, 35.259999999999998f, 31.52f, 34.32f, 37.350000000000001f, 39.689999999999998f, 43.079999999999998f, 46.270000000000003f, 47.770000000000003f, 49.960000000000001f, 51.090000000000003f, 50.210000000000001f, 50.399999999999999f, 50.990000000000002f, 49.18f, 48.640000000000001f, 47.109999999999999f, 48.609999999999999f, 55.32f, 60.5f, 69.159999999999997f, 77.530000000000001f, 76.879999999999995f, 70.400000000000006f, 63.200000000000003f, 53.890000000000001f, 56.200000000000003f, 78.230000000000004f, 112.92f, 144.15000000000001f, 157.21000000000001f, 152.59999999999999f, 140.93000000000001f, 122.45f, 110.67f, 108.84999999999999f, 105.73999999999999f, 100.04000000000001f, 92.640000000000001f, 80.469999999999999f, 66.939999999999998f, 54.060000000000002f, 47.869999999999997f, 49.340000000000003f, 59.880000000000003f};
        for (int i=0; i<Gtest.length; i++){
            V.add(Gtest[i]);
        }
        /*
        V.add(0);
        V.add(1);
        V.add(2);
        V.add(3);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        V.add(4);
        */

        /*
        double[][] array = {{1.,2.,3},{4.,5.,6.},{7.,8.,10.}};
        Matrix A = new Matrix(array);
        Matrix b = Matrix.random(3,1);
        Matrix x = A.solve(b);
        Matrix Residual = A.times(x).minus(b);
        double rnorm = Residual.normInf();
        */

        dist=1;
        Log.d("+++++++++++++++++++++","");
        setContentView(R.layout.activity_variogram);
        LineChart chart = (LineChart) findViewById(R.id.chart);
        ArrayList<Float> L = variogram_total_calcul(V, dist);
        Button buttonback4 = (Button) findViewById(R.id.buttonback4);
        buttonback4.setOnClickListener(new View.OnClickListener() {
            @Override

            public void onClick(View view) {

                Intent intent = new Intent(Variogram.this, MainPrise.class);
                intent.putExtra("Folder" , MainPrise.getProjetName());
                startActivity(intent);
            }
        });
        List<Entry> entries = new ArrayList<Entry>();
        for (int i=0 ; i<L.size(); i++) {

            entries.add(new Entry(i+1, L.get(i)));
            //Log.d("DebugV",entries.toString());
        }

        LineDataSet dataSet = new LineDataSet(entries, "Experimental Data");

        LineData lineData = new LineData(dataSet);

        chart.setData(lineData);
        chart.invalidate();


    }

    }


